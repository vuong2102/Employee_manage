{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./user-auth.service\";\nexport class EmployeeService {\n  constructor(httpClient, userAuthService) {\n    this.httpClient = httpClient;\n    this.userAuthService = userAuthService;\n    this.baseURL = \"http://localhost:8080/api/v1\";\n    this.employees$ = (name = '', pageNo = 0, pageSize = 10) => this.httpClient.get(`${this.baseURL}/employees?name=${name}&pageNo=${pageNo}&pageSize=${pageSize}`);\n  }\n  getEmployeesList(name = '', pageNo = 0, pageSize = 10) {\n    return this.httpClient.get(`${this.baseURL}/employees?name=${name}&pageNo=${pageNo}&pageSize=${pageSize}`);\n  }\n  // getEmployeesList(): Observable<Employee[]>{\n  //   return this.httpClient.get<Employee[]>(`${this.baseURL}`);\n  // }\n  createEmployee(employee) {\n    return this.httpClient.post(`${this.baseURL}/create-employee`, employee);\n  }\n  getEmployeeById(id) {\n    return this.httpClient.get(`${this.baseURL}/employees/${id}`);\n  }\n  updateEmployee(id, employee) {\n    return this.httpClient.put(`${this.baseURL}/update-employee/${id}`, employee);\n  }\n  detailEmployee(id) {\n    return this.httpClient.get(`${this.baseURL}/employees/${id}`);\n  }\n  deleteEmployee(id) {\n    return this.httpClient.delete(`${this.baseURL}/delete-employee/${id}`);\n  }\n  login(loginData) {\n    return this.httpClient.post(`${this.baseURL}/sign-in`, loginData);\n  }\n  signup(signupData) {\n    return this.httpClient.post(`${this.baseURL}/sign-up`, signupData);\n  }\n  roleMatch(allowedRoles) {\n    let isMatch = false;\n    const userRole = this.userAuthService.getRoles();\n    if (userRole === allowedRoles) {\n      isMatch = true;\n      return isMatch;\n    } else {\n      return isMatch;\n    }\n  }\n}\nEmployeeService.ɵfac = function EmployeeService_Factory(t) {\n  return new (t || EmployeeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UserAuthService));\n};\nEmployeeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EmployeeService,\n  factory: EmployeeService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAaA,OAAM,MAAOA,eAAe;EAI1BC,YAAoBC,UAAsB,EAChCC,eAAgC;IADtB,eAAU,GAAVD,UAAU;IACpB,oBAAe,GAAfC,eAAe;IAHjB,YAAO,GAAG,8BAA8B;IAKhD,eAAU,GAAG,CAACC,OAAe,EAAE,EAAEC,SAAiB,CAAC,EAAEC,WAAmB,EAAE,KAC1E,IAAI,CAACJ,UAAU,CAACK,GAAG,CAAoB,GAAG,IAAI,CAACC,OAAO,mBAAmBJ,IAAI,WAAWC,MAAM,aAAaC,QAAQ,EAAE,CAAC;EAHxE;EAK9CG,gBAAgB,CAACL,OAAe,EAAE,EAAEC,SAAiB,CAAC,EAAEC,WAAmB,EAAE;IAC3E,OAAO,IAAI,CAACJ,UAAU,CAACK,GAAG,CAAoB,GAAG,IAAI,CAACC,OAAO,mBAAmBJ,IAAI,WAAWC,MAAM,aAAaC,QAAQ,EAAE,CAAC;EAC/H;EACA;EACA;EACA;EACAI,cAAc,CAACC,QAAkB;IAC/B,OAAO,IAAI,CAACT,UAAU,CAACU,IAAI,CAAC,GAAG,IAAI,CAACJ,OAAO,kBAAkB,EAAEG,QAAQ,CAAC;EAC1E;EACAE,eAAe,CAACC,EAAU;IACxB,OAAO,IAAI,CAACZ,UAAU,CAACK,GAAG,CAAW,GAAG,IAAI,CAACC,OAAO,cAAcM,EAAE,EAAE,CAAC;EACzE;EACAC,cAAc,CAACD,EAAU,EAAEH,QAAkB;IAC3C,OAAO,IAAI,CAACT,UAAU,CAACc,GAAG,CAAC,GAAG,IAAI,CAACR,OAAO,oBAAoBM,EAAE,EAAE,EAAEH,QAAQ,CAAC;EAC/E;EACAM,cAAc,CAACH,EAAU;IACvB,OAAO,IAAI,CAACZ,UAAU,CAACK,GAAG,CAAC,GAAG,IAAI,CAACC,OAAO,cAAcM,EAAE,EAAE,CAAC;EAC/D;EACAI,cAAc,CAACJ,EAAU;IACvB,OAAO,IAAI,CAACZ,UAAU,CAACiB,MAAM,CAAC,GAAG,IAAI,CAACX,OAAO,oBAAoBM,EAAE,EAAE,CAAC;EACxE;EACAM,KAAK,CAACC,SAAc;IAClB,OAAO,IAAI,CAACnB,UAAU,CAACU,IAAI,CAAC,GAAG,IAAI,CAACJ,OAAO,UAAU,EAAEa,SAAS,CAAC;EACnE;EACAC,MAAM,CAACC,UAAe;IACpB,OAAO,IAAI,CAACrB,UAAU,CAACU,IAAI,CAAC,GAAG,IAAI,CAACJ,OAAO,UAAU,EAAEe,UAAU,CAAC;EACpE;EACAC,SAAS,CAACC,YAAiB;IACzB,IAAIC,OAAO,GAAG,KAAK;IACnB,MAAMC,QAAQ,GAAQ,IAAI,CAACxB,eAAe,CAACyB,QAAQ,EAAE;IACrD,IAAGD,QAAQ,KAAKF,YAAY,EAAC;MAC3BC,OAAO,GAAG,IAAI;MACd,OAAOA,OAAO;KACf,MACG;MACF,OAAOA,OAAO;;EAElB;;AA/CW1B,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAA6B,SAAf7B,eAAe;EAAA8B,YAFd;AAAM","names":["EmployeeService","constructor","httpClient","userAuthService","name","pageNo","pageSize","get","baseURL","getEmployeesList","createEmployee","employee","post","getEmployeeById","id","updateEmployee","put","detailEmployee","deleteEmployee","delete","login","loginData","signup","signupData","roleMatch","allowedRoles","isMatch","userRole","getRoles","factory","providedIn"],"sourceRoot":"","sources":["D:\\Code\\Projects\\EmployeeManager\\Employee_Manager_Angular\\src\\app\\Service\\employee.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Employee } from '../interface/employee';\r\nimport { CreateEmployeeComponent } from '../Employee/create-employee/create-employee.component';\r\nimport { ApiResponse } from '../interface/api-response';\r\nimport { Page } from '../interface/page';\r\nimport { UserAuthService } from './user-auth.service';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EmployeeService {\r\n\r\n  private baseURL = \"http://localhost:8080/api/v1\";\r\n\r\n  constructor(private httpClient: HttpClient,\r\n    private userAuthService: UserAuthService) { }\r\n\r\n  employees$ = (name: string = '', pageNo: number = 0, pageSize: number = 10): Observable<ApiResponse<Page>> =>\r\n  this.httpClient.get<ApiResponse<Page>>(`${this.baseURL}/employees?name=${name}&pageNo=${pageNo}&pageSize=${pageSize}`);\r\n\r\n  getEmployeesList(name: string = '', pageNo: number = 0, pageSize: number = 10): Observable<ApiResponse<Page>>{\r\n    return this.httpClient.get<ApiResponse<Page>>(`${this.baseURL}/employees?name=${name}&pageNo=${pageNo}&pageSize=${pageSize}`);\r\n  }\r\n  // getEmployeesList(): Observable<Employee[]>{\r\n  //   return this.httpClient.get<Employee[]>(`${this.baseURL}`);\r\n  // }\r\n  createEmployee(employee: Employee): Observable<Object>{\r\n    return this.httpClient.post(`${this.baseURL}/create-employee`, employee);\r\n  }\r\n  getEmployeeById(id: number): Observable<Employee>{\r\n    return this.httpClient.get<Employee>(`${this.baseURL}/employees/${id}`);\r\n  }\r\n  updateEmployee(id: number, employee: Employee): Observable<Object>{\r\n    return this.httpClient.put(`${this.baseURL}/update-employee/${id}`, employee);\r\n  }\r\n  detailEmployee(id: number){\r\n    return this.httpClient.get(`${this.baseURL}/employees/${id}`);\r\n  }\r\n  deleteEmployee(id: number): Observable<Object>{\r\n    return this.httpClient.delete(`${this.baseURL}/delete-employee/${id}`);\r\n  }\r\n  login(loginData: any){\r\n    return this.httpClient.post(`${this.baseURL}/sign-in`, loginData);\r\n  }\r\n  signup(signupData: any){\r\n    return this.httpClient.post(`${this.baseURL}/sign-up`, signupData);\r\n  }\r\n  roleMatch(allowedRoles: any): boolean{\r\n    let isMatch = false;\r\n    const userRole: any = this.userAuthService.getRoles();\r\n    if(userRole === allowedRoles){\r\n      isMatch = true;\r\n      return isMatch;\r\n    }\r\n    else{\r\n      return isMatch;\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}